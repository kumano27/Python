pygame インストール後サンプル動作
>>> import pygame.examples.aliens # Aliensのプログラムをインポート
>>> pygame.examples.aliens.main() # main関数を実行してプログラム起動

Surface を使って図形を描く
>>> # draw test
... import pygame # Pygameインポート
>>> WIDTH = 640
>>> HEIGHT = 480
>>> BLACK = (  0,  0,  0) # 色の表現
>>> WHITE = (255,255,255) # 色の表現
>>> RED   = (255,  0,  0) # 色の表現
>>> GREEN = (  0,255,  0) # 色の表現
>>> BLUE  = (  0,  0,255) # 色の表現
>>>
>>> pygame.init()
(6, 0)
>>>
>>> screen = pygame.display.set_mode((WIDTH,HEIGHT)) # Surface(仮想画面）作成
>>> myclock = pygame.time.Clock()
>>> screen.fill(BLACK) # Surface を黒(BLACK)で塗りつぶす
<rect(0, 0, 640, 480)>
>>>
>>> # line
... startpos = (50,100)
>>> endpos = (150,200)
>>> pygame.draw.line(screen,WHITE,startpos,endpos) # 線を描く
<rect(50, 100, 101, 101)>
>>>
>>> # rect
... rect = (200,100,100,100)
>>> pygame.draw.rect(screen,RED,rect) # 四角形を描く
<rect(200, 100, 100, 100)>
>>>
>>> # circle
... pos = (400, 150)
>>> radius = 50
>>> pygame.draw.circle(screen,GREEN,pos,radius)  # 円を描く
<rect(350, 100, 100, 100)>
>>>
>>> # polygon
... poslist = [(500, 200),(550, 100),(600, 200)]
>>> pygame.draw.polygon(screen,BLUE,poslist)  # 多角形を描く
<rect(500, 100, 101, 101)>
>>>
>>> pygame.display.flip() # Surfaceを画面に表示
>>> endflag = 0
>>>
>>> while endflag == 0: # メインループ
...     for event in pygame.event.get(): # イベント処理
...             if event.type == pygame.QUIT: endflag = 1 # イベント処理
...     myclock.tick(60) # フレームレートの設定
...     pygame.quit()
...
>>>

メモ
変数screenはSurface型、関数の戻り値を受けている


画像を表示する
その前に pygame のパス確認
>>> pygame
<module 'pygame' from 'C:\\Users\\PCUser\\AppData\\Roaming\\Python\\Python36\\si
te-packages\\pygame\\__init__.py'>
【画像追加パス】
C:\Users\PCUser\AppData\Roaming\Python\Python36\site-packages\pygame 配下

>>> # blit test
... import pygame
>>>
>>> WIDTH = 640
>>> HEIGHT = 480
>>> BLUE  = (  0,  0,255)
>>> BLACK = (  0,  0,  0)
>>> WHITE = (255,255,255)
>>> pygame.init()
(6, 0)
>>> screen = pygame.display.set_mode((WIDTH,HEIGHT))
>>> myfont = pygame.font.Font(None, 32)
>>> myclock = pygame.time.Clock()
>>> imagel = pygame.image.load("Temmie.png").convert()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
pygame.error: Couldn't open Temmie.png
>>> imagel = pygame.image.load("Temmie.png").convert() # Pythonインストール時展開指定パスに画像コピー
>>> image1 = pygame.image.load("Temmie.png").convert() # l じゃなくて 1
サイズ:32 × 32


一応はじめから、、、
>>> # blit test
... import pygame
>>>
>>> WIDTH = 640
>>> HEIGHT = 480
>>> BLUE  = (  0,  0,255)
>>> BLACK = (  0,  0,  0)
>>> WHITE = (255,255,255)
>>> pygame.init()
(6, 0)
>>> screen = pygame.display.set_mode((WIDTH,HEIGHT))	画面全体のSurfaceを作成
>>> myfont = pygame.font.Font(None, 32)	フォント設定
>>> myclock = pygame.time.Clock()
>>> image1 = pygame.image.load("Temmie.png").convert()	画像ファイルを読み込んでSurfaceを作る
>>>
>>> screen.fill(BLUE)
<rect(0, 0, 640, 480)>
>>> screen.blit(image1,(0,0))	画像を画面全体のSurfaceに描画
<rect(0, 0, 300, 300)>
>>>
>>> for i in range(9):
...     angle = i * 45
...     pos = (i * 64, 80)
...     image2 = pygame.transform.rotate(image1,angle)	画像を回転させた新しいSurfaceを作成
...     screen.blit(image2,pos)	画像を画面全体のSurfaceに描画
...     pos = (i * 64, 140)
...     image2.set_colorkey(BLACK)	透明色を設定
...     screen.blit(image2,pos)	画像を画面全体のSurfaceに描画
...     imagetext=myfont.render(str(angle),True,WHITE)	文字列のSurfaceを作る
...     postext = (i * 64, 190)
...     screen.blit(imagetext,postext)	文字列を描画する
...
<rect(0, 80, 300, 300)>
<rect(0, 140, 300, 300)>
<rect(0, 190, 12, 23)>
<rect(64, 80, 424, 400)>
<rect(64, 140, 424, 340)>
<rect(64, 190, 26, 23)>
<rect(128, 80, 300, 300)>
<rect(128, 140, 300, 300)>
<rect(128, 190, 24, 23)>
<rect(192, 80, 424, 400)>
<rect(192, 140, 424, 340)>
<rect(192, 190, 38, 23)>
<rect(256, 80, 300, 300)>
<rect(256, 140, 300, 300)>
<rect(256, 190, 37, 23)>
<rect(320, 80, 320, 400)>
<rect(320, 140, 320, 340)>
<rect(320, 190, 36, 23)>
<rect(384, 80, 256, 300)>
<rect(384, 140, 256, 300)>
<rect(384, 190, 36, 23)>
<rect(448, 80, 192, 400)>
<rect(448, 140, 192, 340)>
<rect(448, 190, 36, 23)>
<rect(512, 80, 128, 300)>
<rect(512, 140, 128, 300)>
<rect(512, 190, 38, 23)>
>>> pygame.display.flip()
>>> endflag = 0
False
>>>
>>> while endflag == 0:
...     for event in pygame.event.get():
...             if event.type == pygame.QUIT: endflag = 1
...     myclock.tick(60)
...
>>> pygame.quit()



コピペ用
# blit test
import pygame

WIDTH = 640
HEIGHT = 480
BLUE  = (  0,  0,255)
BLACK = (  0,  0,  0)
WHITE = (255,255,255)
pygame.init()

screen = pygame.display.set_mode((WIDTH,HEIGHT))

myfont = pygame.font.Font(None, 32)
myclock = pygame.time.Clock()
image1 = pygame.image.load("Temmie.png").convert()

screen.fill(BLUE)

screen.blit(image1,(0,0))


for i in range(9):
    angle = i * 45
    pos = (i * 64, 80)
    image2 = pygame.transform.rotate(image1,angle)
    screen.blit(image2,pos)
    pos = (i * 64, 140)
    image2.set_colorkey(BLACK)
    screen.blit(image2,pos)
    imagetext=myfont.render(str(angle),True,WHITE)
    postext = (i * 64, 190)
    screen.blit(imagetext,postext)
pygame.display.flip()
endflag = 0

while endflag == 0:
    for event in pygame.event.get():
            if event.type == pygame.QUIT: endflag = 1
    myclock.tick(60)

pygame.quit()
--------------------------------------------




スプライト表示
>>>	#sprite test
... import pygame
>>>	import random
>>>
>>>	width = 640
>>>	height = 480
>>>	blue  = (  0,  0,255)
>>>	green = (  0,255,  0)
>>>
>>>	# sprite class
...	class Spclass(pygame.sprite.Sprite):
...		def __init__(self):	# コンストラクタ定義
...			pygame.sprite.Sprite.__init__(self)	# 親クラス __init__を実行
...			self.image = \	# 画像読み込み①
...			pygame.image.load("Temmie.png").convert()	# 画像読み込み②
...			colorkey = self.image.get_at((0,0))	# 透明色設定①
...			self.image.set_colorkey(colorkey)	# 透明色設定②
...			self.rect = self.image.get_rect()	# サイズ設定
...			self.rect.centerx = random.randrange(whidth)	# 座標設定①
...			self.rect.centery = random.randrange(height)	# 座標設定②
...			self.x1 = random.randrange(-3,3)	# 速度を設定①
...			self.y1 = random.randrange(-3,3)	# 速度を設定②
...		def update(self):	# update 関数を定義
...			self.rect.centerx += self.x1	# 座標設定①
...			self.rect.centery += self.y1	# 座標設定②
...			if self.rect.centerx >= width \	# 速度変更
...			or self.rect.centerx < 0:
...				self.x1 *= -1
...			if self.rect.centery >= height \
...			or self.rect.centery < 0:
...				self.y1 *= -1
...
>>>
>>>	# main
... pygame.init()
(6, 0)
>>>	screen = pygame.display.set_mode((width,height))
>>>	myclock = pygame.time.Clock()
>>>	allgroup = pygame.sprite.Group()
>>>	for i in range(100):
...		allgroup.add(Spclass())
...
>>>	endflag = 0
>>>	while endflag == 0:
...		for event in pygame.event.get():
...			if event.type == pygame.QUIT: endflag = 1
...			screen.fill(blue)
...			rect = (0, height/2, width, height/2)
...			pygame.draw.rect(screen,green, rect)
...			allgroup.update()
...			allgroup.draw(screen)
...			myclock.tick(60)
...			pygame.display.flip()
...
>>>


コピペ用
#sprite test
import pygame
import random

width = 640
height = 480
blue  = (  0,  0,255)
green = (  0,255,  0)

# sprite class
class Spclass(pygame.sprite.Sprite):
	def __init__(self):
		pygame.sprite.Sprite.__init__(self)
		self.image = \
		pygame.image.load("Temmie.png").convert()
		colorkey = self.image.get_at((0,0))
		self.image.set_colorkey(colorkey)
		self.rect = self.image.get_rect()
		self.rect.centerx = random.randrange(width)
		self.rect.centery = random.randrange(height)
		self.x1 = random.randrange(-3,3)
		self.y1 = random.randrange(-3,3)
	def update(self):
		self.rect.centerx += self.x1
		self.rect.centery += self.y1
		if self.rect.centerx >= width \
		or self.rect.centerx < 0:
			self.x1 *= -1
		if self.rect.centery >= height \
		or self.rect.centery < 0:
			self.y1 *= -1

# main
pygame.init()

screen = pygame.display.set_mode((width,height))
myclock = pygame.time.Clock()
allgroup = pygame.sprite.Group()
for i in range(100):
	allgroup.add(Spclass())

endflag = 0

while endflag == 0:
	for event in pygame.event.get():
		if event.type == pygame.QUIT: endflag = 1
	screen.fill(blue)
	rect = (0, height/2, width, height/2)
	pygame.draw.rect(screen,green, rect)
	allgroup.update()
	allgroup.draw(screen)
	myclock.tick(60)
	pygame.display.flip()

------------------------------------------------------


ブロック崩し 途中
>>> # ブロック崩し
... import pygame
>>> import math
>>>
>>> def sgn(a):
...     return 1 if a > 0 else -1
...
>>> width  = 640
>>> height = 480
>>> white  = (255, 255, 255)
>>> red    = (255,   0,   0)
>>> yellow = (255, 255,   0)
>>> green  = (  0, 255,   0)
>>> blue   = (  0,   0, 255)
>>> colortable = [red,yellow,green]
>>>
>>> pygame.init()
(6, 0)
>>>
>>> screen = pygame.display.set_mode((width,height))
>>> myfont = pygame.font.Font(None, 64)
>>> myclock = pygame.time.Clock()
>>> br = 10
>>> paddlew = 96
>>> paddleh = 16
>>> blockw = 48
>>> blockh = 24
>>> endflag = 0
>>>
>>> while endflag == 0:
...     ballx = width / 2
...     bally = height - 170
...     bx1 = 2
...     by1 = -2.5
...     x = width / 2
...     y = height - 64
...     paddle = pygame.Rect(x - (paddlew / 2),\
...     y - (paddleh / 2), paddlew, paddleh)
...     blocks = []
...     for i in range(50):
...             x = (i % 10) * (blockw + 4) + 64
...             y = int(i / 10) * (blockh + 4) + 64
...             blocks.append(pygame.Rect(x, y, blockw, \
...             blockh))
...     gameover = 0
...     while endflag == 0:
...             for event in pygame.event.get():
...                     if event.type == pygame.QUIT: endflag = 1
...             press = pygame.key.get_pressed()
...             x = paddle.centerx
...             if(press[pygame.K_LEFT ]): x -= 8
...             if(press[pygame.K_RIGHT]): x -= 8
...             if x >= (paddlew / 2) \
...             and x <= (width - (paddlew / 2)):
...                     paddle.centerx = x
...             x = ballx + bx1
...             y = bally + by1
...             if x < br or x > (width - br): bx1 = -bx1
...             if y < br: by1 = -by1
...             if y > height: gameover += 1
...             dx = paddle.centerx - x
...             dy = paddle.centery - y
...             if dy == 0: dy = 1
...             if abs(dx) < (paddlew / 2 + br) \
...             and abs(dy) < (paddleh / 2 + br):
...                     if abs(dx /dy) > (paddlew / paddleh):
...                             bx1 = -bx1
...                             ballx = paddle.centerx - sgn(bx) \
...                             * (paddlew / 2 + br)
...                     else:
...                             bx1 = -dx / 10
...                             by1 = -by1
...                             bally = paddle.centery - sgn(dx) \
...                             *
  File "<stdin>", line 45
    *
     ^
SyntaxError: invalid syntax
>>>









コピペ用
import pygame
import math

def sgn(a):
    return 1 if a > 0 else -1

width  = 640
height = 480
white  = (255, 255, 255)
red    = (255,   0,   0)
yellow = (255, 255,   0)
green  = (  0, 255,   0)
blue   = (  0,   0, 255)
colortable = [red,yellow,green]

pygame.init()

screen = pygame.display.set_mode((width,height))
myfont = pygame.font.Font(None, 64)
myclock = pygame.time.Clock()
br = 10
paddlew = 96
paddleh = 16
blockw = 48
blockh = 24
endflag = 0

while endflag == 0:
	ballx = width / 2
	bally = height - 170
	bx1 = 2
	by1 = -2.5
	x = width / 2
	y = height - 64
	paddle = pygame.Rect(x - (paddlew / 2), \
	y - (paddleh / 2), paddlew, paddleh)
	blocks = []
	for i in range(50):
		x = (i % 10) * (blockw + 4) + 64
		y = int(i / 10) * (blockh + 4) + 64
		blocks.append(pygame.Rect(x, y, blockw, \
		blockh))
	gameover = 0
	while endflag == 0:
		for event in pygame.event.get():
			if event.type == pygame.QUIT: endflag = 1
		press = pygame.key.get_pressed()
		x = paddle.centerx
		if(press[pygame.K_LEFT ]): x -= 8
		if(press[pygame.K_RIGHT]): x += 8
		if x >= (paddlew / 2) \
		and x <= (width - (paddlew / 2)):
			paddle.centerx = x
		x = ballx + bx1
		y = bally + by1
		if x < br or x > (width - br): bx1 = -bx1
		if y < br: by1 = -by1
		if y > height: gameover += 1
		dx = paddle.centerx - x
		dy = paddle.centery - y
		if dy == 0: dy = 1
		if abs(dx) < (paddlew / 2 + br) \
		and abs(dy) < (paddleh / 2 + br):
			if abs(dx /dy) > (paddlew / paddleh):
				bx1 = -bx1
				ballx = paddle.centerx - sgn(dx) \
				* (paddlew / 2 + br)
			else:
				bx1 = -dx / 10
				by1 = -by1
				bally = paddle.centery - sgn(dy) \
				* (paddleh / 2 + br)
		for block in blocks:
			dx = block.centerx - x
			dy = block.centery - y
			if dy == 0: dy = 1
			if abs(dx) < (blockw / 2 + br) \
			and abs(dy) < (blockh / 2 + br) :
				if abs(dx / dy) > (blockw / blockh):
					bx1 = -bx1
					ballx = block.centerx - sgn(dx) \
					* (blockw / 2 + br)
				else:
					by1 = -by1
					bally = block.centerx - sgn(dy) \
					* (blockh / 2 + br)
			blocks.remove(block)
			break
		ballx += bx1
		bally += by1
		screen.fill(BLUE)
		for block in blocks:
			color = colortable[int(block.y / 28) % 3]
			pygame.draw.rect(screen, color, block)
		pygame.draw.rect(screen,white,paddle)
		pygame.draw.circle(screen,white, \
		(int(ballx), int(bally)), br)
		if gameover > 0:
			imagetext = \
			myfont.render("GAME OVER", True,WHITE)
			screen.blit(imagetext, (180, 300))
			if gameover > 200: break
		myclock.tick(60)
		pygame.display.flip()