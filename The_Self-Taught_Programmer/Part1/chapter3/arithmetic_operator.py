# -*- coding: utf-8 -*-

"""
    算術演算子
    
    constant_and_variable.py で単純な計算をしました。
    ここで使った記号は演算子(オペレーター)と言う。
    Pythonでは、演算子を複数のカテゴリで呼び分けていて、
    割り算のような算数の計算をする演算子を算術演算子と呼ぶ。
    
    Pythonの一般的な算術演算子のリスト
    
    演算子:意味:例:評価結果
    **:累乗:2 ** 3:8
    %:割り算の余り(剰余):14 % 4:2
    //:整数の割り算、切り捨て:13 // 8:1
    /:わり算(除算):13 / 8:1.625
    *:かけ算(積算):8 * 2:16
    -:引き算(減算):7 - 1:6
    +:足し算(加算):2 + 2:4
    
    2つの数字を割り算して、商と余りを計算してみる
    商は割り切れた数で、割り切れなかった残りが余り
    例えば13を5で割った結果は商が2で余りが3
    
"""

13 // 5
# >> 2

13 % 5
# >> 3

# 2を剰余計算に使うと、余りがなければ偶数、余りがあれば奇数
# 偶数
12 % 2
# >> 0
# 奇数
11 % 2
# >> 1

"""
    割り算には2つの演算子がある。
    1つが//で、これは商を返す
    もう1つは/で演算子の左の数字を右の数字で割り、この時小数点数として計算する
"""
14 // 3
# >> 4
14 / 3
# >> 4.666666666666667

"""
    演算子の前後に書く値(今回の例だと数値)は被演算子(オペランド)と言う
    2つの被演算子と1つの演算子があれば、それを式(expression)という。
    プログラムを実行した時、Pythonが式それぞれを評価して、それぞれの式に対して1つの値を返す
    2 + 2と対話シェルに入力したときPythonはその式を評価して4という値を返す
    
    演算子の優先順位は、Please Excute My Dear Aunt Sally?という言葉、
    その頭文字が演算子の優先順位暗記に役立つ。
    Parentheses(カッコ)
    Exponent(累乗)
    Multiplication(掛け算)
    Division(割り算)
    Addition(足し算)
    Subtraction(引き算)
    の順番。
    カッコは累乗より優先度が高く、累乗は掛け算と割り算よりも優先される。
    そして、優先度が一番低いのが足し算と引き算。
    優先順位が同順の演算子が並んだ場合、
    例えば 15 / 3 * 2 のような数式の場合、左から順番に評価される。
    15を3で割ってそれから2をかける。
"""
2 + 2 * 2
# >> 6
(2 + 2) * 2
# >> 8