# -*- coding: utf-8 -*-

"""
    関数を定義する
    
    Pythonで関数を作るということは、
    関数名を決め、引数を定義し、何をするかを定義し、関数の出力を定義する、ということ。
    
    以下は関数を定義する構文
    
    def [関数名]([引数]):
        [関数定義]
    
    数学関数f(x) = x * 2 は、Pythonでは以下のようになる。
    
    
    def キーワードを使ってこれから関数を定義することをPyhtonに伝えている。
    def の後ろには関数名を書く。関数名の選び方は、変数名と同じルールに従う。
    Pythonの規則として、like_thisのように関数名に大文字は使わず、単語間はアンダースコアで区切るようにする。
    
    関数名に名前を付けたら、丸カッコをその後ろに書く。丸カッコの中には、関数が受け取りたい引数が定義する。
    
    丸カッコの後ろにはコロンを書いて改行し、(ほかの複合文と同じように)スペース4つ(Tabスペース)でインデントする。
    コロンと改行のあとにスペースを4つ入れると、そこからのコードは関数定義とみなされる。
    下記の例の場合、関数定義は return x * 2 の1行。
    returnキーワードは関数が呼ばれたときに何を出力するかを定義する。この出力を戻り値と呼ぶ。
    
    [関数名]([カンマで区切られた引数])という実行文で、関数を呼び出す。
    
"""

def f(x):
    return x * 2

# 関数を呼び出す例 fに引数として2を渡す
f(2)

# 関数の戻り値を変数に保存
result = f(2)
# 変数をprint関数に渡す
print(result)


# 後で関数の出力を使いたければ、関数の戻り値を変数に格納しておく
def g(y):
    return y + 1
z = g(4)

if z == 5:
    print("z is 5")
else:
    print("z is not 5")


"""
    関数の引数は、複数だったり、1つだったり、1つもなかったりする。
    引数を必要としない関数を定義する場合、関数定義の際に丸カッコの中は空欄にする
"""

def h():
    return 1 + 1

result = h()
print(result)


# 関数が、複数の引数を受け取る場合、各引数をコンマでくぐる
def i(x,y,z):
    return x + y + z

result = i(1, 2, 3)
print(result)


# 関数手着の最後には、return文がなくても良い。関数に return が無い場合、その関数は None を返す
def j():
    z = 1 + 1
    
result = j()
print(result)